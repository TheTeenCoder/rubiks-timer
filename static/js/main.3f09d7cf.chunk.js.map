{"version":3,"sources":["pages/HomePage.jsx","hooks/storage.js","components/DataModal.jsx","hooks/data.js","components/Timer.jsx","pages/TimerPage.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Button","className","Home","to","useMainData","useLocalStorage","JSON","parse","localStorage","getItem","Modal","setAppElement","DataModal","useState","isOpen","setIsOpen","getAverage","data","add","accumulator","a","times","reduce","length","useDataFunctions","onClick","onRequestClose","Timer","time","setTime","isCounting","setIsCounting","counterRef","useRef","lastTime","setLastTime","setData","handleKeyDown","event","keyCode","console","log","clearInterval","current","toFixed","push","setInterval","state","useEffect","document","addEventListener","removeEventListener","TimerPage","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f09d7cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nconst Button = () => {\n  return (\n    <button className=\"rounded-xl shadow-xl px-4 py-2 bg-black text-white\">\n      Go to experimental timer\n    </button>\n  );\n};\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"flex flex-col justify-center items-center h-screen space-y-2\">\n        <h1 className=\"text-gray-700 font-semibold\">\n          <span className=\"bg-clip-text text-transparent bg-gradient-to-l to-blue-600 from-gray-700\">\n            Cubing Timer.\n          </span>\n        </h1>\n        <span className=\"text-gray-600\">\n          Minimalist, customizable (soon), and unopinionated toward any cuber\n        </span>\n        <Link to=\"/timer\">\n          <Button />\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { useLocalStorage } from \"react-use\";\n\nexport const useLastTime = () => {\n  return useLocalStorage('data-last-time', localStorage.getItem('data-last-time'));\n};\n\nexport const useMainData = () => {\n\n  \n  return useLocalStorage('data-main', JSON.parse(localStorage.getItem('data-main')));\n};\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useDataFunctions } from \"../hooks/data\";\nModal.setAppElement(\"#root\");\n\nconst DataModal = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { getAverage } = useDataFunctions();\n  return (\n    <div>\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"rounded-xl shadow-xl px-4 py-2 bg-black text-white hover:ring-2 hover:ring-blue-300\"\n      >\n        See Data\n      </button>\n      <Modal isOpen={isOpen} onRequestClose={() => setIsOpen(false)}>\n        <div className=\"flex flex-col justify-center items-center \">\n          <div className=\"flex flex-col justify-end items-end \">\n            <button\n              onClick={() => setIsOpen(false)}\n              className=\"shadow-xl px-4 py-2 bg-black text-white\"\n            >\n              Close\n            </button>\n          </div>\n          <h1>Data</h1>\n          <div className=\"text-sm\">\n            <h1>{getAverage()}</h1>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DataModal;\n","import { useMainData } from \"./storage\"\n\nexport const useDataFunctions = () => {\n\n  const [data, setData] = useMainData();\n\n  const add = (accumulator, a) => {\n      return accumulator + a;\n  }\n\n  \n\n  const getAverage = () => {\n    return !data ? 0 : data.times.reduce(add,0)/data.times.length\n  }\n\n  return {\n    getAverage\n  }\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport { useLastTime, useMainData } from \"../hooks/storage\";\n\nconst Timer = () => {\n  const [time, setTime] = useState(0.0);\n  const [isCounting, setIsCounting] = useState(false);\n  const SPACE_KEY = 32;\n  const counterRef = useRef();\n  const [lastTime, setLastTime] = useLastTime();\n  const [data, setData] = useMainData();\n\n  const handleIncrement = () => {\n    setTime(0.0);\n    setIsCounting(true);\n    counterRef.current = setInterval(() => {\n      setTime((state) => state + 0.1);\n    }, 100);\n  };\n\n  const handleStop = () => {\n    clearInterval(counterRef.current);\n    setIsCounting(false);\n    setLastTime(time.toFixed(1));\n    setData((data) => data.times.push(time));\n  };\n\n  const handleKeyDown = (event) => {\n    switch (event.keyCode) {\n      case SPACE_KEY:\n        if (isCounting) {\n          console.log(\"stop it\");\n          handleStop();\n        } else {\n          console.log(\"continue\");\n          handleIncrement();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  });\n\n  return (\n    <div className=\"text-gray-700 justify-center items-center flex flex-col container texct-gray-300\">\n      {(lastTime && !isCounting) && <h3>Last time: {lastTime}s</h3>}\n      <span className=\"flex items-center space-x-2\">\n        <h1>{time.toFixed(1)}</h1>\n        {!isCounting && <h4>seconds.</h4>}\n      </span>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from \"react\";\nimport DataModal from \"../components/DataModal\";\nimport Timer from \"../components/Timer\";\n\nconst TimerPage = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"flex flex-col justify-center items-center h-screen\">\n        <DataModal />\n        <h5 className=\"text-gray-700 font-semibold\">\n          <span className=\"bg-clip-text text-transparent bg-gradient-to-l to-blue-600 from-gray-700\">\n            Click <span className=\"to-pink-100 from-purple-200\">[Space]</span>{\" \"}\n            to start/end timer.\n          </span>\n        </h5>\n        <Timer />\n      </div>\n    </div>\n  );\n};\n\nexport default TimerPage;\n","import React from \"react\";\nimport { BrowserRouter, HashRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"../pages/HomePage\";\nimport TimerPage from \"../pages/TimerPage\";\nimport \"../styles/styles.css\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/timer\">\n          <TimerPage />\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}